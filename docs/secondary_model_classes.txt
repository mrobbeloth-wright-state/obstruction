@startuml

+enum Direction {
    S
    SW
    W
    NW
    N
    NE
    E
    SE
    -value : int
    -Direction(value)
    +String getEnumByString(int)
}

+class ChainCodingContainer {
    -border : Mat
    -chain_time : double
    -cc : ArrayList<Double>
    -start : Point
    +ChainCodingContainer(Mat, double, ArrayList<Double, Point)
    +String chainCodeString()
    +Mat getBorder() 
    +ArrayList<Double> getCc()
    +double getChain_time()
    +Point getStart()
    +void setBorder(Mat)
    +String toString()
}

Direction --* ChainCodingContainer

+class CompositeMat {
    -listofMats : ArrayList<Mat>
    -mat : Mat
    +CompositeMat()
    +CompositeMat(ArrayList<Mat>, Mat)
    +ArrayList<Mat> getListOfMats()
    +Mat getMat()
}

+class KMeansNGBContainer {
    -clustered_data : Mat
    -stats : HashMap<String, Mat>
    +kMeansNGBContainer(Mat, HashMap<String, Mat>)
    +Mat getClustered_data()
    +HashMap<String, Mat> getStats()
}

+class LineSegmentContainer {
    -segment_x : ArrayList<Mat>
    -segment_y : ArrayList<Mat>
    +LineSegmentContainer(ArrayList<Mat>, ArrayList<Mat>)
    +long getSegment_time()
    +ArrayList<Mat> getSegment_x()
    +ArrayList<Mat> getSegement_y() 
    +String toString()
}

+class Moments {
    -static logger: Logger
    +static double getRawMoment(int, int, double[][])
    +static Point getRawMoment(double [][])
    +static Point getCentralMoment(int, int, double[][])
    +static double getCovarianceXY(int, int, double[][])
    +static double getVarianceX(int, int, double[][])
    +static double getVarianceY(int, int, double[][])
    +static double getNormalizedCentralMoment(int, int, double[][])
    +static double getHuMoment(double[][])
}

@enduml

