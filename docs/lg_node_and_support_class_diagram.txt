@startuml

+class CurveLineSegMetaData{
    -connList : ArrayList<CurveLineSegMetaData>
    -curvature : double
    -ep : double
    -length : double
    -lineNumber : long
    -orientation : double
    -sp : double
    -totalTime : long
    +CurveLineSegMetaData()
    +CurveLineSegMetaData(Point, Point, double, double, double, long)
    +boolean equals(Object)
    +ArrayList<CurveLineSegMetaData> getConnList()
    +double getCurvature()
    +Point getEp()
    +double getLength()
    +long getLineNumber()
    +double getOrientation()
    +Point getSp()
    +long getTotalTime()
    +int hashCode()
    +void setConnList(ArrayList<CurveLineSegMetaData>)
    +void setCurvature(double)
    +void setEp(Point)
    +void setLength(double)
    +void setOrientation(double)
    +setSp(Point)
    +setTotalTime(long)
    +toString(String)
}

enum Project_Utilities.Partitioning_Algorithm {
}

+class LGNode {
    -center : Point
    -border : Mat
    -size : long
    -L : ArrayList<CurveLineSegMetaData>
    -node_id : int
    -pa : Project_Utilities.Partitioning_Algorithm
    -segment : Mat
    -stats : HashMap<String, Double>
    +LGNode()
    +LGNode(Point, HashMap<String,Double>, Mat, ArrayList<CurveLineSegMetaData>,Mat, Project_Utilities.Partitioning_Algorithm, int)
    +LGNode(Point, Mat, Project_Utilities.Partitioning_Algorithm)
    +Mat getBorder()
    +Point getCenter()
    +ArrayList<CurveLineSegMetaData> getL()
    +long getSize()
    +HashMap<String, Double>
    +void setBorder(Mat)
    +void setL(ArrayList<CurveLineSegMetaData>)
    +void setSize(long)
    +String toString()
}

Project_Utilities.Partitioning_Algorithm --o LGNode
CurveLineSegMetaData "many" --o "1" LGNode : contains

@enduml
