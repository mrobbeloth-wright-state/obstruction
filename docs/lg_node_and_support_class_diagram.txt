@startuml

+class CurveLineSegMetaData [[java:robbeloth.research.CurveLineSegMetaData]] {
	-Point sp
	-Point ep
	-double length
	-double orientation
	-double curvature
	-long lineNumber
	-long totalTime
	-ArrayList<CurveLineSegMetaData> connList
	+CurveLineSegMetaData(Point sp, Point ep, double length, double orientation, double curvature, long lineNumber)
	+CurveLineSegMetaData()
	+long getLineNumber()
	+ArrayList<CurveLineSegMetaData> getConnList()
	+void setConnList(ArrayList<CurveLineSegMetaData> connList)
	+Point getSp()
	+void setSp(Point sp)
	+double getLength()
	+void setLength(double length)
	+double getOrientation()
	+void setOrientation(double orientation)
	+double getCurvature()
	+void setCurvature(double curvature)
	+Point getEp()
	+int hashCode()
	+boolean equals(Object obj)
	+void setEp(Point ep)
	+String toString()
	+long getTotalTime()
	+void setTotalTime(long totalTime)
}

enum Project_Utilities.Partitioning_Algorithm {
}

+class LGNode [[java:robbeloth.research.LGNode]] {
	-Point center
	-HashMap<String,Double> stats
	-ArrayList<CurveLineSegMetaData> L
	-Mat border
	-long size
	-ProjectUtilities.Partitioning_Algorithm pa
	-int node_id
	+HashMap<String,Double> getStats()
	+LGNode()
	+LGNode(Point center, Mat border, ProjectUtilities.Partitioning_Algorithm pa, int node_id)
	+LGNode(Point center, HashMap<String,Double> stats, Mat border, ProjectUtilities.Partitioning_Algorithm pa, int node_id)
	+LGNode(Point center, HashMap<String,Double> stats, Mat border, ArrayList<CurveLineSegMetaData> lmd, ProjectUtilities.Partitioning_Algorithm pa, int node_id)
	+Point getCenter()
	+ArrayList<CurveLineSegMetaData> getL()
	+Mat getBorder()
	+long getSize()
	+void setL(ArrayList<CurveLineSegMetaData> lmd)
	+void setBorder(Mat border)
	+void setSize(long size)
	+String toString()
}

Project_Utilities.Partitioning_Algorithm --o LGNode
CurveLineSegMetaData "many" --o "1" LGNode : contains

@enduml
