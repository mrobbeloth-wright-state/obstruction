@startuml

+class ProjectController {
  {static} +void main(String[])
  {static} -void run_unit_tests(String[])
}

+enum Partitioning_Algorithm {
      OPENCV
      NGB
      NONE
}

Partitioning_Algorithm --o ProjectUtilities


class ProjectUtilities [[java:robbeloth.research.ProjectUtilities]] {
	+{static}File modifyFileName(File fn, String appendStr, String extension)
	+{static}void writeImagesToDisk(BufferedImage bImg, File fn, String appendStr)
	+{static}void writeImagesToDisk(BufferedImage bImg, File fn, String appendStr, String format)
	-{static}void writeJPEGImagestoDisk(BufferedImage bImg, File outputFile)
	+{static}BufferedImage deepCopy(BufferedImage bi)
	+{static}void writePDFtoDisk(File fn, String title, String author, String creator, String producer, String keywords, BufferedImage oImg, BufferedImage bImg)
	+{static}void writePDFtoDiskDblSrc(File fn, String title, String author, String creator, String producer, String keywords, BufferedImage oImg1, BufferedImage oImg2, BufferedImage bImg)
	+{static}boolean mergePDFs(File dir)
	+{static}void delayMe(long milliseconds)
	+{static}boolean generatePresentation(File dir, String title, String author)
	+{static}int[][] Convert1DArrayto2DMatrix(int[] p, int width)
	+{static}int[][] Convert1DArrayto2DMatrix(int[] p, int rows, int cols)
	+{static}double[][] Convert1DArrayto2DMatrixD(int[] p, int width)
	+{static}double[][] Convert1DArrayto2DMatrixD(double[] p, int width)
	+{static}int[] Convert2DMatrixto1DArray(int[][] p)
	+{static}int[] Convert2DMatrixto1DArray(int[][] p, int rows, int cols)
	+{static}int[] Convert2DMatrixDto1DArray(double[][] p)
	+{static}BufferedImage convert(BufferedImage src, int bufImgType)
	+{static}List<Mat> showClusters(Mat cutout, Mat labels, Mat centers)
	+{static}Mat round(Mat input)
	+{static}Mat multiplyScalar(Mat m, double i)
	+{static}ArrayList<Point> findInMat(Mat input, int k, String direction)
	+{static}int[][] convertMatToIntArray(Mat p)
	+{static}double[][] convertMatToDoubleArray(Mat p)
	+{static}byte[][] convertMatToByteArray(Mat p)
	+{static}Mat convertInttoGrayscaleMat(int[][] p, int rows, int cols)
	+{static}Mat convertDoubletoGrayscaleMat(double[][] p, int rows, int cols)
	+{static}Vector<Double> generateRange(double a, double b, double c)
	+{static}Mat generateRange_Mat(double a, double b, double c)
	+{static}Vector<Double> linspace(double a, double b, int n)
	+{static}Mat linspace_Mat(double a, double b, int n)
	+{static}int sub2ind(int row, int col, int rows, int cols)
	+{static}Mat ind2sub(int sub, int rows, int cols)
	-{static}boolean isPerfectSquare(long n)
	+{static}boolean onSegment(Point p, Point q, Point r)
	+{static}int orientation(Point p, Point q, Point r)
	+{static}boolean doIntersect(Point p1, Point q1, Point p2, Point q2)
	+{static}boolean isInside(Mat nonZeroBorderPoints, int n, Point p)
	+{static}long DetermineNodeSize(Mat border)
	+{static}double[] convertMat1xn(ArrayList<Mat> MatAL, Boolean duplicateBegEnd)
	+{static}double findMin(double[] array)
	+{static}double findMax(double[] array)
	+{static}double distance(double x1, double x2, double y1, double y2)
	+{static}double distance(Point start, Point end)
	+{static}Mat autoCropGrayScaleImage(Mat segment, boolean apply_threshold)
	+{static}Mat openMostRecentImage(String filenamePattern, int imgCodecsFlag)
	+{static}MinMaxLocResult findMMLRExtents(MatOfPoint mop)
	+{static}Mat setInitialLabelsGrayscale(int width, int height, int k)
	+{static}byte[] flatten2DByteArray(byte[][] p)
	+{static}Mat returnEveryNthElement(Mat p, int n)
	+{static}Mat sharpen(Mat input)
	+{static}void heapStatistics()
	+{static}int findRowInSpreadSheet(XSSFSheet sheet, String cellContent)
	+{static}Rect calcRectCoveringPts(ArrayList<Point> pts)
	+{static}List<Point> convertMatOfFloat6(MatOfFloat6 input)
}
@enduml
